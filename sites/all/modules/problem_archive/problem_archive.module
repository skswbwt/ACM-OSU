<?php

function problem_archive_search_form($form, &$form_state)
{
	dsm( $form_state );
	
	$form = array();

	$form['problemName'] = array
	(
		'#type' => 'textfield',
		'#title' => 'Problem Name',
		'#size' => 30
	);
	
	$form['problemDifficulty'] = array
	(
		'#type' => 'select',
		'#title' => 'Problem Difficulty',
		'#options' => array
		(
			'' => '',
			'1' => 'Easy',
			'2' => 'Medium',
			'3' => 'Hard',
			'4' => 'Expert'
		)
	);	

	$form['problemSrc'] = array
	(
		'#type' => 'select',
		'#title' => 'Problem Source',
		'#options' => array
		(
			'' => '',
			'TopCoder' => 'TopCoder',
			'UVA' => 'UVA',
			'USACO' => 'USACO',
			'SPOJ' => 'SPOJ'
		)
	);
	
	$header = array('problemCats' => 'Problem Categories');

	$options1 = array();
	$options2 = array();

	$allCats = array
	(
		"String Manipulation",
		"String Parsing",
		"Simulation",
		"Encryption/Compression",
		"Sorting",
		"Brute Force",
		"Greedy",
		"Recursion",
		"Simple Search, Iteration",
		"Geometry",
		"Graph Theory",
		"Dynamic Programming",
		"Math",
		"Simple Math",
		"Advanced Math",
	); 

	for($i=0;$i<=7;$i++)
		$options1[ $allCats[ $i ] ] = array( 'problemCats' => $allCats[ $i ] );

	for($i=8;$i<count( $allCats );$i++)
		$options2[ $allCats[ $i ] ] = array( 'problemCats' => $allCats[ $i ] );

	$form['nodes1'] = array
	(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options1,
		'#attributes' => array( 'style' => 'float:left; width:45%' ),
		'#element_validate' => array('prob_valid'),
		'#empty' => t('No items available'),
	);

	$form['nodes2'] = array
	(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options2,
		'#attributes' => array( 'style' => 'float:left; width:45%' ),
		'#empty' => t('No items available'),
	);

	$form['matchCats'] = array
	(
		'#type' => 'radios',
		'#title' => 'Matching Options',
		'#options' => array( 'Match Any Category', 'Match All Categories' ),
	);

	$form['submit'] = array
	(
		'#type' => 'submit',
		'#value' => 'Search',
	);
	
	$header = array
	( 
		array('data' => t('Problem Name'), 'field' => 'name'),
		array('data' => t('Difficulty'), 'field' => 'diff'),
		array('data' => t('Categories'), 'field' => 'cat'),
		array('data' => t('Source'), 'field' => 'src'),
		array('data' => t('Used In'), 'field' => 'usedIn'),
		array('data' => t('Date'), 'field' => 'date', 'sort' => 'desc'),
		array('data' => t('Analysis'), 'field' => 'analysis'),
	);
	
	db_gateway_connect();
	
	// filter problems using selected criteria
	$prob_name = site_settings_default_state( 'problemName', '', $form_state );
	$prob_diff = site_settings_default_state( 'problemDifficulty', '', $form_state );
	$prob_src = site_settings_default_state( 'problemSrc', '', $form_state );
	$matching = site_settings_default_state( 'matchCats', '0', $form_state ) == '0' ? 'OR' : 'AND';
	$node1_choices = site_settings_default_state( 'nodes1', array(), $form_state );
	$node2_choices = site_settings_default_state( 'nodes2', array(), $form_state );
	$all_choices = array();
	
	foreach( $node1_choices as $key => $val )
		if( $val == $key )
			array_push( $all_choices, '%' . $key . '%' );
	
	foreach( $node2_choices as $key => $val )
		if( $val == $key )
			array_push( $all_choices, '%' . $key . '%' );
			
	$search_sql = ' AND name LIKE %s AND lvl LIKE %s AND src LIKE %s ';
	
	for( $i=0;$i<count( $all_choices );$i++ )
	{
		if( $i == 0 )
			$search_sql .= " AND ( cat LIKE %s ";
		else
			$search_sql .= $matching . " cat LIKE %s ";
	}
	
	if( !empty( $all_choices ) )
		$search_sql .= " )";
		
	$ts = tablesort_init($header);
	
	$total = db_gateway_query_value("SELECT COUNT(*) 
									FROM Problems, map_difficulty 
									WHERE lvl = map_diff_id" . $search_sql,
									'%' . $prob_name . '%', '%' . $prob_diff . '%', '%' . $prob_src . '%', $all_choices );
	
	$num_per_page = 25;

	$curPage = pager_default_initialize($total, $num_per_page);
	
	$offset = $num_per_page * $curPage;
	
	$rows = db_gateway_query_rows("SELECT name, map_diff_text AS diff, cat, src, usedIn, date 
									FROM Problems, map_difficulty 
									WHERE lvl = map_diff_id" . $search_sql . "
									ORDER BY " . $ts['sql'] . ' ' . $ts['sort'] . "
									LIMIT " . $offset . ',' . $num_per_page,
									'%' . $prob_name . '%', '%' . $prob_diff . '%', '%' . $prob_src . '%', $all_choices );
	

	
	$form['#suffix'] = theme_table
	( array
		( 
 		'header' => $header,
 		'rows' => $rows,
 		'attributes' => array(),
 		'caption' => '',
 		'colgroups' => array(),
 		'sticky' => '',
 		'empty' => '' ) );
 	
 	$form['#suffix'] .= theme('pager') . ' Total ' . $total;
 	
 	$form['#action'] = url('problems/archive');
	return $form;
}

function prob_valid( $element, &$form_state )
{
	dsm( $element );
	dsm( $form_state );
}
function problem_archive_search_form_submit( $form, &$form_state )
{
	$form_state['rebuild'] = true;

}
function problem_archive_home()
{
	drupal_add_js(drupal_get_path('module', 'problem_archive') . "/problem_archive.js");
	
	db_gateway_connect();
	
	$res = db_gateway_query_rows("SELECT * FROM Students");
 		
	return drupal_get_form('problem_archive_search_form');
}

function problem_archive_menu()
{
	$items['problems/archive'] = array(
		'title' => 'Problem Archive',
		'page callback' => 'problem_archive_home',
		'access arguments' => array('problem archive access'),
		'type' => MENU_NORMAL_ITEM,
	);

	return $items;  
}

function problem_archive_permission()
{
	return array( "problem archive access" => array(
		'title' => 'Problem Archive Access',
		'description' => 'Provide Authenticated Users with access to the Problem Archive' ) );
}



